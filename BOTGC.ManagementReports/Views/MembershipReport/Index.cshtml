@using System.Text.Json
@using BOTGC.ManagementReports.Models

@model MembershipReportDto
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Env

@{
    var nonce = Context.Items["CSPNonce"] as string ?? "";
    var supressLogo = string.Equals(ViewData["SupressLogo"]?.ToString(), "true", StringComparison.OrdinalIgnoreCase);
}

@{
    ViewData["Title"] = "Application Form";
}

@section Head {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

    @if (Env.IsDevelopment())
    {
        <script nonce="@nonce" src="~/js/dist/reporting.bundle.js"></script>
    }
    else
    {
        <script nonce="@nonce" src="~/js/dist/reporting.bundle.min.js"></script>
    }

    <script>
        Chart.register(window['chartjs-plugin-annotation']);
    </script>
}

<div class="print-wrap">
    <h1>Membership Report</h1>

    <h2 class="keep-with-next">Playing vs Non-Playing Members</h2>
    <canvas class="chart" id="membershipChart"></canvas>

    <h2> Total Members by Category</h2>
    <canvas class="chart" id="categoryGroupBreakdownChart"></canvas>

    <div class="page-break-after"></div>

    <h2 class="keep-with-next">Waiting List by Membership Category</h2>
    <canvas class="chart" id="waitingListChart"></canvas>

    @* <canvas class="chart" id="dailyJoinLeaveChart"></canvas> *@

    <div class="page-break-after"></div>

    <h2>Daily Membership Revenue</h2>
    <canvas class="chart" id="revenueVsBudgetChart"></canvas>

    <h2 class="keep-with-next">Accumulated Membership Revenue</h2>
    <canvas class="chart" id="accRevenueVsBudgetChart"></canvas>
        
    <div class="page-break-after"></div>

    <div class="controls">
        <input type="checkbox" id="toggleAll" aria-controls="quarters-region" />
        <label for="toggleAll">Show all quarters (print-friendly)</label>
    </div>

    <nav id="quarters-region" class="tabs" role="tablist" aria-label="Quarterly Membership Reports">
        @for (int i = 0; i < Model.QuarterlyStats.Count; i++)
        {
            var quarter = Model.QuarterlyStats[i];
            <button
                class="tab-button"
                role="tab"
                aria-selected="@(i == 0 ? "true" : "false")"
                aria-controls="panel-@i"
                id="tab-@i"
                tabindex="@(i == 0 ? "0" : "-1")"
            >
                @quarter.PeriodDescription
            </button>
        }
    </nav>

    @for (int i = 0; i < Model.QuarterlyStats.Count; i++)
    {
        var quarter = Model.QuarterlyStats[i];
        <section class="tab-panel"
                    role="tabpanel"
                    tabindex="0"
                    aria-labelledby="tab-@i"
                    id="panel-@i"
                    aria-hidden="@(i == 0 ? "false" : "true")">
            <h2>@quarter.PeriodDescription</h2>
            <h4>@quarter.FromDate.ToString("dd MMMM yyyy") - @quarter.ToDate.ToString("dd MMMM yyyy")</h4>

            <table>
                <thead>
                    <tr>
                        <th>Metric</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td>New Members</td><td>@quarter.NewMembers</td></tr>
                    <tr><td>Leavers</td><td>@quarter.Leavers</td></tr>
                    <tr><td>Deaths</td><td>@quarter.Deaths</td></tr>
                </tbody>
            </table>

            @if (quarter.CategoryChanges?.Any() == true)
            {
                <h3>Category Changes</h3>
                <table>
                    <thead>
                        <tr>
                            <th>From → To</th>
                            <th>Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var change in quarter.CategoryChanges
                        .OrderByDescending(kv => kv.Value)
                        .ThenBy(kv => kv.Key))
                        {
                            <tr>
                                <td>@change.Key</td>
                                <td>@change.Value</td>
                            </tr>
                        }

                    </tbody>
                </table>
            }

            @if (quarter.CategoryGroupTotals?.Any() == true)
            {
                <h3>Category Group Totals</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Group</th>
                            <th>Total Members</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var group in quarter.CategoryGroupTotals
                        .OrderByDescending(g => g.Value)
                        .ThenBy(g => g.Key))
                        {
                            <tr>
                                <td>@group.Key</td>
                                <td>@group.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if ((quarter.WaitingListApplicationsByGroup?.Any() ?? false) ||
                (quarter.WaitingListConversionsByAppliedGroup?.Any() ?? false) ||
                (quarter.WaitingListDropoutsByAppliedGroup?.Any() ?? false))
            {
                <h3>Waiting List – Applications & Outcomes</h3>

                <p>
                    Applications: @quarter.WaitingListApplications
                    Converted: @quarter.WaitingListConversions
                    Did not proceed: @quarter.WaitingListDropouts
                    Conversion rate:
                    @(quarter.WaitingListApplications> 0
                        ? ((decimal)quarter.WaitingListConversions / quarter.WaitingListApplications).ToString("P0")
                        : "0%")
                </p>

                <table>
                    <thead>
                        <tr>
                            <th>Applied Category</th>
                            <th>Applications</th>
                            <th>Converted</th>
                            <th>Did Not Proceed</th>
                            <th>Conversion Rate</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var cats = quarter.WaitingListApplicationsByGroup?.Keys
                            .Union(quarter.WaitingListConversionsByAppliedGroup?.Keys ?? Enumerable.Empty<string>())
                            .Union(quarter.WaitingListDropoutsByAppliedGroup?.Keys ?? Enumerable.Empty<string>())
                            .OrderBy(k => k) ?? Enumerable.Empty<string>();
                        }
                        @foreach (var cat in cats)
                        {
                            var a = quarter.WaitingListApplicationsByGroup?.GetValueOrDefault(cat) ?? 0;
                            var c = quarter.WaitingListConversionsByAppliedGroup?.GetValueOrDefault(cat) ?? 0;
                            var d = quarter.WaitingListDropoutsByAppliedGroup?.GetValueOrDefault(cat) ?? 0;
                            var r = a > 0 ? (decimal)c / a : 0m;
                            <tr>
                                <td>@cat</td>
                                <td>@a</td>
                                <td>@c</td>
                                <td>@d</td>
                                <td>@r:P0</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </section>
    }
</div>

@section Scripts {

    <script nonce="@nonce">

        const __charts = [];

        document.addEventListener("DOMContentLoaded", function () {
            const dataPoints = @Html.Raw(Json.Serialize(Model.DataPoints));

            const tabs = document.querySelectorAll('.tab-button');
            const panels = document.querySelectorAll('.tab-panel');
            const toggleAll = document.getElementById('toggleAll');

            let activeIndex = [...tabs].findIndex(t => t.getAttribute('aria-selected') === 'true');
            if (activeIndex < 0) { activeIndex = 0; }

            tabs.forEach((tab, i) => {
                tab.addEventListener('click', () => {
                    if (document.body.classList.contains('expand-all')) { return; }

                    tabs.forEach(t => { t.setAttribute('aria-selected', 'false'); t.setAttribute('tabindex', '-1'); });
                    panels.forEach(p => p.setAttribute('aria-hidden', 'true'));
                    tab.setAttribute('aria-selected', 'true');
                    tab.setAttribute('tabindex', '0');
                    panels[i].setAttribute('aria-hidden', 'false');
                    panels[i].focus();
                    activeIndex = i;
                });

                tab.addEventListener('keydown', (e) => {
                    if (document.body.classList.contains('expand-all')) { return; }
                    let newIndex = null;
                    if (e.key === 'ArrowRight') newIndex = (i + 1) % tabs.length;
                    if (e.key === 'ArrowLeft') newIndex = (i - 1 + tabs.length) % tabs.length;
                    if (newIndex !== null) { tabs[newIndex].focus(); e.preventDefault(); }
                });
            });

            function applyExpandAll(on) {
                if (on) {
                    document.body.classList.add('expand-all');
                    tabs.forEach(t => { t.setAttribute('tabindex', '-1'); t.setAttribute('aria-selected', 'false'); });
                    panels.forEach(p => p.setAttribute('aria-hidden', 'false'));
                } else {
                    document.body.classList.remove('expand-all');
                    tabs.forEach((t, i) => {
                        const selected = i === activeIndex ? 'true' : 'false';
                        t.setAttribute('aria-selected', selected);
                        t.setAttribute('tabindex', i === activeIndex ? '0' : '-1');
                    });
                    panels.forEach((p, i) => p.setAttribute('aria-hidden', i === activeIndex ? 'false' : 'true'));
                }
            }

            toggleAll.addEventListener('change', e => applyExpandAll(e.target.checked));

            const labels = dataPoints.map(dp => new Date(dp.date).toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" }));
            const playingMembers = dataPoints.map(dp => dp.playingMembers || 0);
            const nonPlayingMembers = dataPoints.map(dp => dp.nonPlayingMembers || 0);
            const targetPlayingMembers = dataPoints.map(dp => dp.targetPlayingMembers !== 0 ? dp.targetPlayingMembers : undefined);

            const fyStart = new Date("@Model.FinancialYearStart.ToString("yyyy-MM-dd")");
            const fyEnd = new Date("@Model.FinancialYearEnd.ToString("yyyy-MM-dd")");
            const today = new Date("@Model.Today.ToString("yyyy-MM-dd")");

            const fmt = d => new Date(d).toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" });

            const keyDates = [
              { label: "Start of Financial Year", date: fyStart, color: "black",  dashed: false },
              { label: "End of Financial Year",   date: fyEnd,   color: "black",  dashed: false },
              { label: "Today",                   date: today,   color: "orange", dashed: false }
            ];

            const annotationsObj = {
              fyStart: {
                type: "line",
                scaleID: "x",
                value: fmt(fyStart),         
                borderColor: "black",
                borderWidth: 1,
                borderDash: undefined,
                label: { content: "Start of Financial Year", enabled: true, position: "start" }
              },
              fyEnd: {
                type: "line",
                scaleID: "x",
                value: fmt(fyEnd),
                borderColor: "black",
                borderWidth: 1,
                label: { content: "End of Financial Year", enabled: true, position: "start" }
              },
              today: {
                type: "line",
                scaleID: "x",
                value: fmt(today),
                borderColor: "orange",
                borderWidth: 1,
                label: { content: "Today", enabled: true, position: "start" }
              }
            };

            const annotations = Object.entries(annotationsObj).map(([_, v]) => v);

            // Prepare datasets for the first chart
            prepareMembershipChart(labels, playingMembers, nonPlayingMembers, targetPlayingMembers, annotations);
            prepareCategoryGroupBreakdownChart(labels, dataPoints);
            //prepareJoinerLeaverBarChart(labels, dataPoints);
            prepareRevenueChart(dataPoints, annotations, fyStart, fyEnd);
            prepareAccRevenueChart(dataPoints, annotations, fyStart, fyEnd);
            prepareWaitingListChart(labels, dataPoints, fyStart, fyEnd);

        });
        
     </script>
}
