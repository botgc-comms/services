@using BOTGC.Leaderboards.Models;

@model ClubChampionshipLeaderboardViewModel

@{
    var nonce = Context.Items["CSPNonce"] as string ?? "";

    var qrUrl = $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}{Context.Request.QueryString}";
    var encodedQrUrl = System.Net.WebUtility.UrlEncode(qrUrl);

    string FormatScore(string? score)
    {
        if (string.IsNullOrWhiteSpace(score)) return "";
        return score.Trim() == "0" || score.Trim().ToUpper() == "LEVEL" ? "LEVEL" : score;
    }

    string R1Display(int thru, string? r1)
    {
        return (thru >= 18) ? FormatScore(r1) : "-";
    }

    string R2Display(int thru, string? r2)
    {
        return (thru == 36) ? FormatScore(r2) : "-";
    }

    string ThruDisplay(int thru)
    {
        return thru == 36 ? "F" : thru.ToString();
    }

    string ParCssClass(string? par)
    {
        if (string.IsNullOrWhiteSpace(par)) return "";
        int p;
        if (par.Trim().ToUpper() == "LEVEL") return "";
        if (int.TryParse(par, out p) && p < 0) return "score-below-par";
        if (par.StartsWith("-") && int.TryParse(par, out p) && p < 0) return "score-below-par";
        return "";
    }

    int ParseToPar(string? par)
    {
        if (string.IsNullOrWhiteSpace(par)) return 0;
        par = par.Trim().ToUpper();
        if (par == "LEVEL") return 0;
        if (par.StartsWith("+")) return int.TryParse(par.Substring(1), out var n) ? n : 0;
        if (par.StartsWith("-")) return int.TryParse(par, out var n) ? n : 0;
        return int.TryParse(par, out var x) ? x : 0;
    }
}

@section Head {
    @if (Env?.IsDevelopment() == true)
    {
        <script nonce="@nonce" src="~/js/dist/leaderboard.bundle.js"></script>
    }
    else
    {
        <script nonce="@nonce" src="~/js/dist/leaderboard.bundle.min.js"></script>
    }
}

<img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@encodedQrUrl" alt="QR for @Model.CompetitionDetails.Name" class="leaderboardQRCode" >

<div class="leaderboard">
            
    <div class="flash"></div>
    <img src="~/img/club-logo.png" alt="Logo" class="logo">
    <div class="header">
        <div></div>
        <div class="header-inner">
            <div class="trophy-wrapper">
                <img class="trophy" src="/img/trophy.png" alt="Trophy">
            </div>
            <div class="text">
                <div id="competition-title">@Model.CompetitionDetails.Name</div>
            </div>
        </div>
        <div></div>
    </div>
    <div class="content">
        <div class="left"></div>
        <div class="central">
            <div class="table-container">
                <div class="orange-bg"></div>
                <table id="leaderboard-table">
                    @if (Model != null && Model.Players != null && Model.Players.Any())
                    {
                        <thead>
                            <tr class="score-header">
                                <th style="width:calc(7%);"></th>
                                <th style="width:calc(35%);"></th>
                                <th style="width:calc(10%);" class="score-cell">Thru</th>
                                <th style="width:calc(10%);" class="score-cell">R1</th>
                                <th style="width:calc(10%);" class="score-cell">R2</th>
                                <th style="width:calc(20%);" class="score-cell">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var players = Model.Players.OrderBy(p => p.Position).Take(25).ToList();
                                var remainingRows = 25 - players.Count;
                            }

                            @for (int i = 1; i <= 25; i++)
                            {
                                var player = Model.Players.FirstOrDefault(p => p.Position == i);
                                <tr id="row-@i" class="player-row">
                                    <td class="score-cell">@i</td>
                                    <td class="name-cell toggle-details">@((player != null) ? player.Name : "")</td>
                                    <td class="score-cell">@((player != null) ? ThruDisplay(player.Thru) : "")</td>
                                    <td class="score-cell">@((player != null) ? R1Display(player.Thru, player.R1) : "")</td>
                                    <td class="score-cell">@((player != null) ? R2Display(player.Thru, player.R2) : "")</td>
                                    <td class="score-cell overall-score-cell @(player != null && ParseToPar(player.Par) < 0 ? "score-below-par" : "")">
                                        @((player != null) ? FormatScore(player.Par) : "")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                    else
                    {
                        <thead>
                            <tr>
                                <th colspan="6" class="waiting-header">Waiting for results...</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < 30; i++)
                            {
                                <tr class="placeholder-row">
                                    <td class="score-cell">&nbsp;</td>
                                    <td class="name-cell">&nbsp;</td>
                                    <td class="score-cell">&nbsp;</td>
                                    <td class="score-cell">&nbsp;</td>
                                    <td class="score-cell">&nbsp;</td>
                                    <td class="score-cell overall-score-cell">&nbsp;</td>
                                </tr>
                            }
                        </tbody>
                    }


                </table>
            </div>
        </div>
        <div class="right"></div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $(".toggle-details").click(function () {
            var playerId = $(this).closest("tr").data("player-id");
            $("#details-" + playerId).toggle();
        });
    });

    function hideOverflowingLeaderboardRows() {
        const table = document.getElementById("leaderboard-table");
        if (!table) return;

        const thead = table.querySelector("thead");
        const tbody = table.querySelector("tbody");
        const rows = tbody.querySelectorAll("tr");
        if (!rows.length) return;

        // Reset visibility
        rows.forEach(row => row.style.display = "");

        // Measure the height of the first N rows (let's use 5 as a sample)
        const sampleSize = Math.min(5, rows.length);
        let totalSampleHeight = 0;
        for (let i = 0; i < sampleSize; i++) {
            totalSampleHeight += rows[i].getBoundingClientRect().height;
        }
        const avgRowHeight = totalSampleHeight / sampleSize;

        const headerHeight = thead?.getBoundingClientRect().height || 0;
        const tableTop = table.getBoundingClientRect().top;
        const viewportHeight = window.innerHeight;

        // Allow a small buffer below the table (e.g., 20px)
        const availableHeight = viewportHeight - tableTop - 20;
        const maxVisibleRows = Math.floor((availableHeight - headerHeight) / avgRowHeight) - 5;

        rows.forEach((row, index) => {
            row.style.display = index < maxVisibleRows ? "" : "none";
        });
    }

    // Call this on load and on resize:
    window.addEventListener('resize', hideOverflowingLeaderboardRows);
    window.addEventListener("load", hideOverflowingLeaderboardRows);

    // Set the competitionId from your model
    const competitionId = @Model.CompetitionDetails.Id;

    // Poll every 30 seconds
    setInterval(() => window.updateClubChampionshipLeaderboardRows(competitionId), 30000);
</script>
