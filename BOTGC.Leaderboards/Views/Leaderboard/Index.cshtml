@using BOTGC.Leaderboards.Models;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Env

@model LeaderboardViewModel

@{
    var nonce = Context.Items["CSPNonce"] as string ?? "";
}

@section Head {
    @if (Env.IsDevelopment())
    {
        <script nonce="@nonce" src="~/js/dist/leaderboard.bundle.js"></script>
    }
    else
    {
        <script nonce="@nonce" src="~/js/dist/leaderboard.bundle.min.js"></script>
    }
}

<div class="leaderboard">

    <div class="flash"></div>
    <img src="~/img/club-logo.png" alt="Logo" class="logo">
    <div class="header">
        <div class="header-inner">
            <div class="trophy-wrapper">
                <img class="trophy" src="/img/junioreclectic.png" alt="Trophy">
            </div>
            <div class="text">
                <div id="competition-title">@Model.CompetitionDetails.Name</div>
            </div>
        </div>
    </div>
    <div class="content">
        <div class="left"></div>
        <div class="central">
            <div class="table-container">
                <div class="orange-bg"></div>
                <table id="leaderboard-table">
                    @if (Model != null && Model.Players.Any())
                    {
                        <thead>
                            <tr class="score-header">
                                <th style="width:calc(10%);"></th>
                                <th style="width:calc(70%);"></th>
                                <th style="width:calc(20%)" class="score-cell">Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var players = Model.Players.OrderBy(p => p.Position).Take(25).ToList();
                                var remainingRows = 25 - players.Count;
                            }

                            @for (int i = 1; i <= 25; i++)
                            {
                                var player = Model.Players.FirstOrDefault(p => p.Position == i);
                                <tr id="row-@i" class="player-row">
                                    <td class="score-cell">@i</td>
                                    <td class="name-cell toggle-details">@((player != null) ? $"{player.Names} ({player.PlayingHandicap})" : "")</td>
                                    <td class="score-cell overall-score-cell">@((player != null) ? player.Score : "")</td>
                                </tr>
                            }
                        </tbody>
                    }
                    else
                    {
                        <thead>
                            <tr>
                                <th colspan="3" class="waiting-header">Waiting for results...</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < 30; i++)
                            {
                                <tr class="placeholder-row">
                                    <td class="score-cell">&nbsp;</td>
                                    <td class="name-cell">&nbsp;</td>
                                    <td class="score-cell overall-score-cell">&nbsp;</td>
                                </tr>
                            }
                        </tbody>
                    }


                </table>
            </div>
        </div>
        <div class="right"></div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $(".toggle-details").click(function () {
            var playerId = $(this).closest("tr").data("player-id");
            $("#details-" + playerId).toggle();
        });
    });

    function hideOverflowingLeaderboardRows() {
        const table = document.getElementById("leaderboard-table");
        if (!table) return;

        const thead = table.querySelector("thead");
        const tbody = table.querySelector("tbody");
        const rows = tbody.querySelectorAll("tr");

        // Reset visibility
        rows.forEach(row => row.style.display = "");

        const rowHeight = rows[0]?.getBoundingClientRect().height || 0;
        const headerHeight = thead?.getBoundingClientRect().height || 0;
        const tableTop = table.getBoundingClientRect().top;
        const viewportHeight = window.innerHeight;

        // Allow a small buffer below the table (e.g., 20px)
        const availableHeight = viewportHeight - tableTop - 20;
        const maxVisibleRows = Math.floor((availableHeight - headerHeight) / rowHeight) - 2;

        rows.forEach((row, index) => {
            row.style.display = index < maxVisibleRows ? "" : "none";
        });
    }

    window.addEventListener("load", hideOverflowingLeaderboardRows);
    window.addEventListener("resize", hideOverflowingLeaderboardRows);

    // Set the competitionId from your model
    const competitionId = @Model.CompetitionDetails.Id;

    // Initial update (optional)
    window.updateLeaderboardRows(competitionId);

    // Poll every 30 seconds
    setInterval(() => window.updateLeaderboardRows(competitionId), 10000);
</script>
